#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
        int data;
        Node* left;
        Node* right;

    public:
        Node(int d){
            data = d;
            left = nullptr;
            right = nullptr;
        }
};


void preorder_1(Node* root) {
    if (root == nullptr) return;

    stack<Node*> st;
    st.push(root);

    while (!st.empty()) {
        Node* curr = st.top();
        st.pop();
        cout << curr->data << " ";

        
        if (curr->right) {
            st.push(curr->right);
        }
        if (curr->left) {
            st.push(curr->left);
        }
    }
}

void inorder_1(Node* root) {
    stack<Node*> st;
    Node* curr = root;

    while (curr != nullptr || !st.empty()) {
        
        while (curr != nullptr) {
            st.push(curr);
            curr = curr->left;
        }

        curr = st.top();
        st.pop();
        cout << curr->data << " ";

        
        curr = curr->right;
    }
}

void postorder_1(Node* root) {
    if (root == nullptr) return;

    stack<Node*> st1, st2;
    st1.push(root);

    while (!st1.empty()) {
        Node* curr = st1.top();
        st1.pop();
        st2.push(curr);

        if (curr->left) {
            st1.push(curr->left);
        }
        if (curr->right) {
            st1.push(curr->right);
        }
    }

    
    while (!st2.empty()) {
        cout << st1.top()->data << " ";
        st2.pop();
    }
}


void preorder(Node* root){
    if(root == nullptr){
        return;
    }
    
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

void inorder(Node* root){
    if(root == nullptr){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

void postorder(Node* root){
    if(root == nullptr){
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";

}

void levelOrder(Node* root){
    queue<Node*> q;
    if(root == nullptr){
        cout<<"Tree is empty"<<endl;
        return;
    }
    q.push(root);
    while(!q.empty()){
        Node* temp = q.front();
        if(temp->left != nullptr){
            q.push(temp->left);
        }
        if(temp->right != nullptr){
            q.push(temp->right);
        } 
        cout<<temp->data<<" ";
        q.pop();
    }
}

bool searchBST(Node* root,int key){
    if(root == nullptr){
        return 0;
    }
    if(root->data == key){
        return 1;
    }
    return searchBST(root->left,key) || searchBST(root->right,key);

}

Node* make_clone(Node* root) {
    if (root == NULL) {
        return NULL;  
    }

    
    Node* new_node = new Node(root->data);

    new_node->left = make_clone(root->left);
    new_node->right = make_clone(root->right);

    return new_node;  //root of the cloned tree
}


bool check_equal(Node* root1,Node* root2){
    if(root1 == NULL && root2 == NULL){
        return true;
    }
    if((root1 == NULL && root2 != NULL) || (root1 != NULL && root2 == NULL)){
        return false;
    }
    else if(root1->data == root2->data){
        return check_equal(root1->left,root2->left) && check_equal(root1->right,root2->right);
    }
    else{
        return false;
    }
}

void create_mirror(Node* root, Node* &root1) {
    if (root == NULL) {
        return;
    }
    
    root1 = new Node(root->data);

    create_mirror(root->right, root1->left);  
    create_mirror(root->left, root1->right);  
}

bool search(Node* root,int key){
    if(root == nullptr){
        return false;
    }
    if(root->data == key){
        return true;
    }
    return search(root->right,key) || search(root->left,key) ;
}





class BST{
    public:
        Node* root;
    
    public:

        BST(){
            root = nullptr;
        }

        void insert(int val){
            Node* temp = new Node(val); 
            if(root == nullptr){
                root = temp;
                return;
            }
            else{
                Node* prev = nullptr;
                Node* mover = root;
                while(mover != nullptr){
                    prev = mover;
                    if(mover->data > val){
                        mover = mover->left;
                    }
                    else{
                        mover = mover->right;
                    }
                }
                //insert in left
                if(prev->data > val){
                    prev->left = temp;
                }
                else if(prev->data < val){
                    prev->right = temp;
                }
            }
        }

        void display(){
            Node* temp = root;
            //preorder
            cout<<"Preorder is: ";
            preorder(root);
            cout<<endl;
            
            //inorder
            cout<<"Inorder is: ";
            inorder(root);
            cout<<endl;

            //postorder
            cout<<"PostOrder is: ";
            postorder(root);
            cout<<endl;

            //levelorder
            cout<<"level order is: ";
            levelOrder(root);
            cout<<endl;
        }

        void search(int val){
            // cout<<searchBST(root,val)<<endl;
            if(searchBST(root,val)){
                cout<<val<<" is present"<<endl;
            }
            else{
                cout<<"No"<<endl;
            }
        }

};

class BT{

    public:
        Node* root;
    
    public:

        BT(){
            root = nullptr;
        }

        void insert(int val){
            Node* temp = new Node(val); 
            if(root == nullptr){
                root = temp;
                return;
            }
            else{
                Node* mover = root;
                Node* prev = NULL;
                char choice;
                while(mover){
                    prev = mover;
                    cout<<"Enter choice to go to left or right (l/r) : ";
                    cin>>choice;
                    if(choice == 'l'){
                        mover = mover->left;
                    }
                    else if(choice == 'r'){
                        mover = mover->right;
                    }
                }
                //both left and right are empty
                if(prev->left == NULL && prev->right == NULL){
                    cout<<"Enter choice to enter value in left part or right part (l/r): ";
                    cin>>choice;
                    if(choice == 'l'){
                        prev->left = temp;
                    }
                    else if(choice == 'r'){
                        prev->right = temp;
                    }
                }
                //only 1 is empty
                else if(prev->left == NULL){
                    prev->left = temp;
                }
                else{
                    prev->right = temp; 
                }
            }
        }


        void display(){
            Node* temp = root;
            //preorder
            cout<<"Preorder is: ";
            preorder(root);
            cout<<endl;
            
            //inorder
            cout<<"Inorder is: ";
            inorder(root);
            cout<<endl;

            //postorder
            cout<<"PostOrder is: ";
            postorder(root);
            cout<<endl;

            //levelorder
            cout<<"level order is: ";
            levelOrder(root);
            cout<<endl;
        }


};


int height(Node* root){
    if(root == NULL){
        return 0;
    }
    int left = height(root->left);
    int right = height(root->right);
    return 1 + max(left,right);
}


void del(Node* &root, int key) {
    if (root == NULL) {
        return;
    }

    if (root->data == key) {
        // Case 1: Leaf node
        if (root->left == NULL && root->right == NULL) {
            delete root;
            root = NULL;
        }
        // Case 2: Single child
        else if (root->left == NULL) {
            Node* temp = root;
            root = root->right;
            delete temp;
        }
        else if (root->right == NULL) {
            Node* temp = root;
            root = root->left;
            delete temp;
        }
        // Case 3: Two children
        else {
        
            Node* temp = root->left;
            while (temp->right != NULL) {
                temp = temp->right;
            }
    
            root->data = temp->data;
    
            del(root->left, temp->data);
        }
        cout << "Node deleted successfully" << endl;
        return;
    }

}


int main(){
     cout<<"1. create binary tree \n 2.print binary tree (preorder) \n 3. print binary tree(postorder) \n 4.print binary tree(postorder) \n 5. level order \n 6. make a clone \n 7. check if tree are equal \n 8. create mirror image \n 9. create binary search tree \n 10. delete node from BST \n 11. Construct BST from prorder and inorder \n 12. find height of tree \n 13. search in BST"<<endl;


    BST b1;

    BT b2;
    BT b3;
    
    char ch;
    do{ 
        int x;
        cout<<"Enter choice";
        cin>>x;

        if(x == 1){
            int val;
            cout<<"Enter value to add ";
            cin>>val;
            b2.insert(val);
        }
        else if(x == 2 || x == 3 || x == 4 || x == 5){
            b2.display();
        }
        else if(x == 6){
            Node* root1 = make_clone(b2.root);
            preorder(root1);
        }
        else if(x == 7){
            cout<<check_equal(b2.root,b3.root);
        }
        else if(x == 8){
            Node* temp = b2.root;
            create_mirror(b2.root,temp);
        }
        else if(x == 9){
            int val;
            cout<<"Enter value to add in BST: ";
            cin>>val;
            b1.insert(val);
        }
        else if(x == 10){
            // //delete node
             int key;
             cout<<"Enter Node to be deleted : ";
             cin>>key;
             del(b1.root,key);
        }
        else if(x == 11){
            //construct bs from pre and inoder
        }
        else if(x == 12){
            cout<<"Height of tree is: ";
            cout<<height(b1.root)<<endl;
        }
        else if(x == 13){
            int key;
            cout<<"enter key to search : ";
            cin>>key;
            b1.search(key);
        }
        cout<<"Do you want to perform more Operation(y/n) : ";
        cin>>ch;
    }while(ch == 'y' || ch == 'Y');

}
